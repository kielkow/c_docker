Duvidas? Acessar link(s) abaixo:
-> https://www.docker.com/101-tutorial
-> https://www.docker.com/play-with-docker
-> https://docs.docker.com/get-started/resources/

Executar container com uma imagem:
-> docker run -dp 80:80 YOUR-USER-NAME/getting-started

Executar um container com terminal interativo:
-> docker run -it ubuntu /bin/bash

Verificar containers em utilização:
-> docker ps

Verificar todos os containers:
-> docker ps -a

Compartilhamento / Exposição de portas
-> docker run -p 8080:80 nginx

Compartilhamento na porta da máquina e do container / Exposição de portas
-> docker run -d --name my_nginx -p 80:80 nginx:alpine

Executar um container em segundo plano (modo detached)
-> docker run -d -p 8080:80 nginx
	 or
-> docker container run -d --name <nome> -p 8080:8080 <nome da pasta>:<tag da imagem> 

Remover um container
-> docker rm <id ou nome do container> (-f se quiser forçar)

Remover um container após sair
-> docker run --rm -p 8080:80 nginx

Remover todos os containers (linux/mac/bash,etc)
-> docker rm $(docker ps -a -q) -f

Para executar um comando em um container
-> docker exec -it nome-do-container bash

Para acessar ou executar um comando em um container
-> docker exec -it nome-do-container <comando ou /bin/bash>

Listar imagens
-> docker images

Remover uma imagem
-> docker rmi <nome da imagem>

Remover todas as imagens
-> docker rmi $(docker images -q) -f

Exemplo Dockerfile:
-> FROM golang:1.14

   WORKDIR /go/src/

   COPY . .

   RUN GOOS=linux go build -ldflags="-s -w"

   EXPOSE 8081

   ENTRYPOINT ["./main"]

Gerar build de uma imagem:
-> docker build -t <nome da imagem>:<versao da imagem> .

Gerar build de uma imagem com seu usuario:
-> docker build -t <nome do user>/<nome da imagem>:<versao da imagem (opcional)> .

Login
-> docker login

Realizar o push de sua imagem:
-> docker push <nome da imagem>

Realizar o push de sua imagem com seu usuario:
-> docker push <nome do usuario>/<nome da imagem>
-> docker push kielkow/my_nginx:latest

Exemplo de um dockercompose.yaml
-> version: '3'
   services:
     nginx:
     image: nginx
     volumes:
     - ./nginx:/usr/share/nginx/html/
     ports:
     - 8080:80

     redis:
     image: redis:alpine
     expose:
     - 6379
     
 Iniciar servicos declarados no docker-compose.yml:
 -> docker-compose up
 
  Iniciar servicos declarados no docker-compose.yml de forma desachatada:
 -> docker-compose up -d
 
 Encerrar servicos docker-compose:
 -> docker-compose down
 
 Listar os containers no docker-compose:
 -> docker-compose ps
 
 Encerrar container do docker-compose:
 -> docker-compose -it nome-do-container /bin/bash ou o comando a ser executado

Mostrar arquivos dentro do container/imagem:
-> docker run <nome do container/imagem> ls

Executar processo bash para um container:
-> docker run -it <nome do container/imagem>:<tag da imagem (opcional)> bash

Procurar por imagens:
-> docker search <nome da imagem>

Logs do container:
-> docker logs -f <id da imagem>

Parar container:
-> docker stop <id da imagem>

Apagar container:
-> docker rm <nome do container>

Executar container em determinado diretorio:
-> docker run -d --name <nome do meu container> -p 8080:8080 -v `pwd`:<caminho do deploy da imagem> <nome da imagem>

Mostrar informacoes:
-> docker info

Fazer copia da imagem para o docker hub:
-> docker pull <nome da imagem>:<tag da imagem (opcional)>

Pegar copia da imagem do docker hub:
-> docker run -d --name=my_nginx -p 8080:80 kielkow/my_nginx-commit:v2

Remover imagem:
-> docker rmi <nome da imagem>:<tag da imagem (opcional)>

Sair do bash de um container sem mata-lo:
-> Crtl P+Q

Parar todos os containers de uma vez:
-> docker stop $(docker ps -aq)

Remover todos os containers de uma vez:
-> docker rm $(docker ps -aq)

Remover todas as imagens de uma vez:
-> docker rmi $(docker images -q)

Iniciar docker swarm:
-> docker swarm init --advertise-addr <ip da maquina>:2377 --listen-addr <ip da maquina>:2377

Gerar token manager docker swarm:
-> docker swarm join-token manager

Gerar token worker docker swarm:
-> docker swarm join-token worker

Listar nodes:
-> docker node ls

Promover node como manager:
-> docker node promote <id do node>

Criar service:
-> docker service create --name <nome do service> -p 8080:8080 --replicas 5 <nome da imagem>

Listar servicos:
-> docker service ls

Listar servicos da imagem:
-> docker service ps <nome do servico>

Inspecionar um service:
-> docker service inspect <nome do servico>
   or
-> docker service inspect --pretty <nome do servico>

Escalar services:
-> docker service scale <nome do servico>=7
   or
-> docker service update --replicas 10 <nome do servico>

Listar tasks de um node:
-> docker node ps <nome do node>

Remover service 
-> docker service rm <nome do servico>

Criar overlay network:
-> docker network create -d overlay ps-net

Criar network:
-> docker network create -d bridge my_network

Criar container conectado a uma network:
-> docker run -d --name my_container_nginx --net=my_network nginx

Listar overlay networks:
-> docker network ls

Inspecionar network:
-> docker network inspect bridge

Deploy service com overlay network:
-> docker service create --name <nome do servico> --network ps-net -p 80:80 --replicas 12 <nome da imagem>:<tag da imagem>

Criar service com update-parallelism e update-delay:
-> docker service create \ --update-parallelism 2 \ --update-delay 10m

Atualizar service:
-> docker service update --image <nome da imagem>:<tag da imagem> --update-parallelism 2 \ --update-delay 10s

Listar services por versao da imagem:
-> docker service ps <nome do servico> | grep :<versao da imagem>

Ver versao docker-compose:
-> docker-compose --version

Gerar build docker-compose:
-> docker-compose build

Push tag para uma imagem:
-> docker tag getting-started YOUR-USER-NAME/getting-started

Push de uma imagem para o docker hub:
-> docker push <nome da imagem>

Gerar bundle de uma imagem docker compose:
-> docker-compose bundle

Deploy de uma stack:
-> docker stack deploy <nome da stack>

Listar tasks em uma stack:
-> docker stack tasks <nome da stack>

Remover stack:
-> docker stack rm <nome da stack>

Join docker swarm como manager:
-> docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 192.168.99.121:2377

Join docker swarm como worker:
-> docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.99.121:2377

Parar e remover um container ao mesmo tempo:
-> docker rm -f <the-container-id>

Fazer login no docker hub:
-> docker login -u <user> -p <password>

Criar volume:
-> docker volume create <nome do volume>

Criar volume para um container:
-> docker run -d --name my_nginx -p 8080:80 -v $(pwd):/usr/share/nginx/html nginx

Criar volume apontando para pasta da máquina local:
-> docker volume create --driver local --opt type=none --opt device=$(pwd) --opt o=bind volume_local

Executar um container por um volume especifico, exemplos:
-> docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started
-> docker run -d --name=nginx2 -p 8081:80 -v volume_local:/usr/share/nginx/html nginx

Remover todos os volumes:
-> docker volume prune

Inspecionar volume:
-> docker volume inspect todo-db

Exmplo de um docker-compose:
version: "3.7"

services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos

  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos

volumes:
  todo-mysql-data:

Executar um container com variaveis ambiente:
-> docker run --name leaderboard-redis -e REDIS_PASSWORD=redis123 -d -p 6379:6379 bitnami/redis:latest

Commit de uma alteração no container:
-> docker commit bab7227d31d5 kielkow/nginx-commit 

Gerar container commitado:
-> docker run -d --name=my_nginx -p 8082:80 kielkow/nginx-commit
