Obs:
-> Os volumes são uma forma de salvar e sincronizar os dados da máquina local com os containers.
-> Para acessar minhas e outras imagens: https://hub.docker.com.
-> Criando Dockerfile para app em NodeJS: https://nodejs.org/en/docs/guides/nodejs-docker-webapp.
-> RUN: É usado durante o processo de criação da imagem para executar comandos e criar novas camadas.
   CMD: É usado para definir o comando padrão que será executado quando um contêiner é executado a partir da imagem. 
        Um Dockerfile pode ter apenas uma instrução CMD, e se várias instruções CMD estiverem presentes, apenas a última terá efeito.
-> Caso tenha um arquivo .env dentro do projeto, é possível passar os valores das variaveis para o docker-compose utilizando '${}'. Por exemplo:
   version: '3'
   services:
     postgresql:
       image: bitnami/postgresql
       ports:
         - 5432:5432
       environment:
         - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
         - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
         - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
-> A feature 'links' foi depreciada. Ao invés dela utilizar 'networks'.

Documentações:
-> https://www.docker.com/101-tutorial
-> https://www.docker.com/play-with-docker
-> https://docs.docker.com/get-started/resources/

Executar container com uma imagem:
-> docker run -dp 80:80 YOUR-USER-NAME/getting-started

Executar um container com terminal interativo:
-> docker run -it <container_name> /bin/bash
-> exemplo: docker run -it ubuntu /bin/bash

Verificar containers em utilização:
-> docker ps

Verificar todos os containers:
-> docker ps -a

Compartilhamento / Exposição de portas
-> docker run -p 8080:80 nginx (a primeira porta é da maquina local, e a segunda é a porta do container)

Compartilhamento na porta da máquina e do container / Exposição de portas
-> docker run -d --name my_nginx -p 80:80 nginx:alpine

Executar um container em segundo plano (modo detached)
-> docker run -d -p 8080:80 nginx
	 or
-> docker container run -d --name <nome> -p 8080:8080 <nome da pasta>:<tag da imagem> 

Remover um container
-> docker rm <id ou nome do container> (-f se quiser forçar)

Remover um container após sair
-> docker run --rm -p 8080:80 nginx

Remover todos os containers (linux/mac/bash,etc)
-> docker rm $(docker ps -a -q) -f

Para executar um comando em um container
-> docker exec -it nome-do-container bash

Para executar um comando em um container sem bash
-> docker exec -it nome-do-container apk add bash

Para acessar ou executar um comando em um container
-> docker exec -it nome-do-container <comando ou /bin/bash>

Listar imagens
-> docker images

Remover uma imagem
-> docker rmi <nome da imagem>

Remover todas as imagens
-> docker rmi $(docker images -q) -f

-> Exemplo Dockerfile para app em Go:
FROM golang:1.14
WORKDIR /go/src/
COPY . .
RUN GOOS=linux go build -ldflags="-s -w"
EXPOSE 8081
ENTRYPOINT ["./main"]

Gerar build de uma imagem:
-> docker build -t <nome da imagem>:<versao da imagem> .

Gerar build de uma imagem com seu usuario:
-> docker build -t <nome do user>/<nome da imagem>:<versao da imagem (opcional)> .

Login
-> docker login

Realizar o push de sua imagem:
-> docker push <nome da imagem>

Realizar o push de sua imagem com seu usuario:
-> docker push <nome do usuario>/<nome da imagem>
-> docker push kielkow/my_nginx:latest

-> Exemplo de docker-compose com Nginx e Redis:
version: '3'
services:
  nginx:
    image: nginx
    volumes:
      - './nginx:/usr/share/nginx/html/'
    ports:
      - '8080:80'
  redis:
    image: 'redis:alpine'
    expose:
      - 6379
 
 Executar servicos declarados no docker-compose.yml:
 -> docker-compose up
 
 Executar servicos declarados no docker-compose.yml de forma desachatada:
 -> docker-compose up -d

 Iniciar servicos declarados no docker-compose.yml:
 -> docker-compose start

 Parar servicos declarados no docker-compose.yml:
 -> docker-compose stop
 
 Encerrar servicos docker-compose:
 -> docker-compose down
 
 Listar os containers no docker-compose:
 -> docker-compose ps
 
 Executar processo bash para servicos do docker-compose:
 -> docker-compose -it <container_name> /bin/bash
 
 Executar comando no terminal para servicos do docker-compose:
 -> docker-compose -it <container_name> <command>
 
 Forçar recriação do docker-compose:
 -> docker-compose up --force-recreate

Mostrar arquivos dentro do container/imagem:
-> docker run <nome do container/imagem> ls

Executar processo bash para um container:
-> docker run -it <nome do container/imagem>:<tag da imagem (opcional)> bash

Procurar por imagens:
-> docker search <nome da imagem>

Logs do container:
-> docker logs <id da imagem>

Logs do container em tempo real:
-> docker logs -f <id da imagem>

Parar container:
-> docker stop <image_id or container_name>

Apagar container:
-> docker rm <nome do container>

Executar container em determinado diretorio:
-> docker run -d --name <nome do meu container> -p 8080:8080 -v `pwd`:<caminho do deploy da imagem> <nome da imagem>

Mostrar informacoes:
-> docker info

Fazer copia da imagem para o docker hub:
-> docker pull <nome da imagem>:<tag da imagem (opcional)>

Pegar copia da imagem do docker hub:
-> docker run -d --name=my_nginx -p 8080:80 kielkow/my_nginx-commit:v2

Remover imagem:
-> docker rmi <nome da imagem>:<tag da imagem (opcional)>

Sair do bash de um container sem mata-lo:
-> Crtl P+Q

Parar todos os containers de uma vez:
-> docker stop $(docker ps -aq)

Remover todos os containers de uma vez:
-> docker rm $(docker ps -aq)

Remover todas as imagens de uma vez:
-> docker rmi $(docker images -q)

Iniciar docker swarm:
-> docker swarm init --advertise-addr <ip da maquina>:2377 --listen-addr <ip da maquina>:2377

Gerar token manager docker swarm:
-> docker swarm join-token manager

Gerar token worker docker swarm:
-> docker swarm join-token worker

Listar nodes:
-> docker node ls

Promover node como manager:
-> docker node promote <id do node>

Criar service:
-> docker service create --name <nome do service> -p 8080:8080 --replicas 5 <nome da imagem>

Listar servicos:
-> docker service ls

Listar servicos da imagem:
-> docker service ps <nome do servico>

Inspecionar um service:
-> docker service inspect <nome do servico>
   or
-> docker service inspect --pretty <nome do servico>

Escalar services:
-> docker service scale <nome do servico>=7
   or
-> docker service update --replicas 10 <nome do servico>

Listar tasks de um node:
-> docker node ps <nome do node>

Remover service 
-> docker service rm <nome do servico>

Criar overlay network:
-> docker network create -d overlay ps-net

Criar network:
-> docker network create -d bridge my_network

Criar container conectado a uma network:
-> docker run -d --name my_container_nginx --net=my_network nginx

Listar overlay networks:
-> docker network ls

Inspecionar network:
-> docker network inspect bridge

Deploy service com overlay network:
-> docker service create --name <nome do servico> --network ps-net -p 80:80 --replicas 12 <nome da imagem>:<tag da imagem>

Criar service com update-parallelism e update-delay:
-> docker service create \ --update-parallelism 2 \ --update-delay 10m

Atualizar service:
-> docker service update --image <nome da imagem>:<tag da imagem> --update-parallelism 2 \ --update-delay 10s

Listar services por versao da imagem:
-> docker service ps <nome do servico> | grep :<versao da imagem>

Ver versao docker-compose:
-> docker-compose --version

Gerar build docker-compose:
-> docker-compose build

Push tag para uma imagem:
-> docker tag getting-started YOUR-USER-NAME/getting-started

Push de uma imagem para o docker hub:
-> docker push <nome da imagem>

Gerar bundle de uma imagem docker compose:
-> docker-compose bundle

Deploy de uma stack:
-> docker stack deploy <nome da stack>

Listar tasks em uma stack:
-> docker stack tasks <nome da stack>

Remover stack:
-> docker stack rm <nome da stack>

Join docker swarm como manager:
-> docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 192.168.99.121:2377

Join docker swarm como worker:
-> docker swarm join --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx 192.168.99.121:2377

Parar e remover um container ao mesmo tempo:
-> docker rm -f <the-container-id>

Fazer login no docker hub:
-> docker login -u <user> -p <password>

Listar volumes:
-> docker volume ls

Criar volume:
-> docker volume create [volume_name]

Criar container com volume:
-> docker run -d --name [container_name] -p [port_number] -v [volume_name]:[container_directory] [image_name]
   example: docker run -d --name my_nginx -p 8080:80 -v nginx_volume:/usr/share/nginx/html nginx
-> docker run -d --name [container_name] -p [port_number] --mount type=volume,source=[volume_name],target=[container_directory] [image_name]
   example: docker run -d --name my_nginx -p 8080:80 --mount type=volume,source=nginx_volume,target=/nginx_volume nginx

Mapear arquivos para um container à partir dos dados da maquina local:
-> docker run -d --name [container_name] -p [port_number] -v [machine_directory]:[container_directory] [image_name]
-> docker run -d --name [container_name] -p [port_number] --mount type=bind,source=[machine_directory],target=[container_directory] [image_name]
   example: docker run -d --name my_nginx -p 8080:80 --mount type=bind,source="$(pwd)"/html,target=/usr/share/nginx/html nginx
   obs: '$(pwd)' retorna o caminho do diretório da máquina local.

Criar volume usando dados da máquina local:
-> docker volume create --name [volume_name] --opt type=none --opt device=[local_path] --opt o=bind
   example: docker volume create --name nginx_volume --opt type=none --opt device=$(pwd)/nginx_volume --opt o=bind

Executar um container por um volume especifico:
-> docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started
-> docker run -d --name=nginx2 -p 8081:80 -v volume_local:/usr/share/nginx/html nginx

Remover todos os volumes que não estão sendo usados:
-> docker volume prune

Inspecionar volume:
-> docker volume inspect [volume_name]

-> Exmplo de docker-compose com nodejs e mysql:
version: "3.7"
services:
  app:
    image: node:12-alpine
    command: sh -c "yarn install && yarn run dev"
    ports:
      - 3000:3000
    working_dir: /app
    volumes:
      - ./:/app
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWORD: secret
      MYSQL_DB: todos
  mysql:
    image: mysql:5.7
    volumes:
      - todo-mysql-data:/var/lib/mysql
    environment: 
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: todos
volumes:
  todo-mysql-data:

Executar um container com variaveis ambiente:
-> docker run --name leaderboard-redis -e REDIS_PASSWORD=redis123 -d -p 6379:6379 bitnami/redis:latest

Commit de uma alteração no container:
-> docker commit bab7227d31d5 kielkow/nginx-commit 

Gerar container commitado:
-> docker run -d --name=my_nginx -p 8082:80 kielkow/nginx-commit

Instalar rabbitmq:
-> criar pasta: mkdir -p /docker/rabbitmq/data
-> sudo docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 --restart=always --hostname rabbitmq-master -v /docker/rabbitmq/data:/var/lib/rabbitmq rabbitmq:3-management

Instalar mongodb:
-> sudo docker container run -d --name mongo -p 27017:27017 mongo

Remover container:
-> sudo docker container rm <container_id>

Remover todos os containers:
-> sudo docker container prune

Remover imagem:
-> sudo docker image rm <image_id>

-> Exemplo de Dockerfile para projeto Node/Typescript:
 FROM node:12                     // Informa a versão do Node
 WORKDIR /usr/src/clean-node-api  // Informa o caminho e o nome da pasta da aplicação que será no servidor
 COPY ./package.json .            // Copia o package.json para a imagem
 RUN npm install --only=prod      // Executa o comando durante criação da imagem
 COPY ./dist ./dist               // Copia a pasta dist para a imagem
 EXPOSE 5000                      // Informa porta
 CMD npm start                    // Executa comando para iniciar

Executar imagem dentro do shell
-> sudo docker run -it <nome_imagem> sh

Iniciar container:
-> docker start <container_id>

Verificar IP do container:
-> docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_name>

Criar container postgresql com nome e senha para o banco:
-> docker run --name <container_name> -e POSTGRES_DB=<db_name> -e POSTGRES_PASSWORD=<db_password> -p 5432:5432 -d postgres

Criar container postgresql versão bitnami:
-> docker run --name postgresql -e POSTGRESQL_DATABASE=postgresql -e POSTGRESQL_USERNAME=postgresql -e POSTGRESQL_PASSWORD=postgresql -p 5432:5432 -d bitnami/postgresql

-> Exmplo de docker-compose com postgreql:
version: '3'
services:
  postgresql:
    image: bitnami/postgresql
    ports:
      - 5432:5432
    environment:
      - POSTGRESQL_DATABASE=postgresql
      - POSTGRESQL_USERNAME=postgresql
      - POSTGRESQL_PASSWORD=postgresql

-> Exemplo de Dockerfile para app NodeJS:
FROM node:18
# Create app directory
WORKDIR /usr/src/app
# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./
RUN npm install
# If you are building your code for production
# RUN npm ci --omit=dev
# Bundle app source
COPY . .
EXPOSE 8080
CMD [ "node", "server.js" ]

-> Exemplo de Dockerfile para app NodeJS com Prisma:
# Run image commands:
# docker build -t ignite-api-solid .
# docker run --name ignite-api-solid -p 3333:3333 ignite-api-solid
# Stop container and remove image:
# docker stop ignite-api-solid && docker rm ignite-api-solid && docker rmi ignite-api-solid
# Use Node.JS Image LTS version.
FROM node:18
# Create app directory.
WORKDIR /app
# Copy package.json and package-lock.json files
COPY package*.json ./
# Copy Prisma file
COPY prisma ./prisma/
# Copy .env file
COPY .env ./
# Copy tsconfig file
COPY tsconfig.json ./
# Install dependencies.
RUN npm install
# Bundle app source.
COPY . .
# Generate Prisma Client.
RUN npx prisma generate
# Build app code.
RUN npm run build
# Container Image listening port 3333.
EXPOSE 3333
# After image build, the command bellow will be executed.
CMD [ "npm", "run", "start:migrate:prod" ]

-> Exemplo de docker-compose com app NodeJS e PostgreSQL:
version: '3'
services:
  postgresql:
    image: bitnami/postgresql
    container_name: postgresql
    hostname: postgresql
    ports:
      - 5432:5432
    networks:
      - app-network
    environment:
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d apisolidpg -U postgresql"]
      interval: 3s
      timeout: 3s
      retries: 3
    restart: unless-stopped
  ignite-api-solid:
    build:
      context: .
      dockerfile: Dockerfile
    image: ignite-api-solid
    container_name: ignite-api-solid
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 3333:3333
    networks:
      - app-network
    environment:
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
      - HOST=${HOST}
      - DATABASE_URL=${DATABASE_URL}
    restart: always
networks:
  app-network:
    name: 'app-network'
    driver: bridge
volumes:
  postgresql-data:
